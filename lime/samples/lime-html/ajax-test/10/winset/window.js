//==================================================== javascript Library last update: 05/11/2009//making by www.dtop.jp//============================================================================ ウィンドウ表示設定//オブジェクトパッケージ=========================================================================//-----------------------------------------------------------------------------------------------//背景オブジェクトとコンストラクタ//引き数：//戻り値：function bgObject(){	this.x;			//配置x座標	this.y;			//配置y座標	this.w;			//横幅	this.h;			//縦幅	this.element;	//背景エレメント}//背景オブジェクトの初期化メソッド//引き数：obj:背景表示後に表示するウィンドウエレメント//戻り値：bgObject.prototype.init = function(){	//スクロールしている場合のx,y座標補正	if(_MSIE){		this.x = document.documentElement.scrollLeft;		this.y = document.documentElement.scrollTop;	}	else{		this.x = window.pageXOffset;		this.y = window.pageYOffset;	}		//ウィンドウ幅と大きさとスクロール量からの割り出し	this.w = windowWidth()+this.x;	this.h = windowHeight()+this.y;		//背景を覆うdivエレメントの作成	this.element = document.createElement('div');	this.element.id = 'bgElement';	this.element.style.width = this.w+'px';	this.element.style.height = this.h+'px';		//表示されているbodyに背景エレメントを表示	var addBodyElement = document.getElementsByTagName('body').item(0);	addBodyElement.appendChild(this.element);		//透明度を下げる	alpha(this.element.id,70,30,'up',this);}//背景オブジェクトが表示終えた後の処理//引き数：//戻り値：bgObject.prototype.next_Event = function(){	//背景表示後に何か実行したい場合記述}//-----------------------------------------------------------------------------------------------//ウィンドウ上部バーの高さvar winbarHeight = 32;//ウィンドウ内のmarginと、マウスからのmarginvar winMargin = 20;//ウィンドウオブジェクトとコンストラクタ//引き数：x,y:ウィンドウの中心位置　w:ウィンドウの横幅　h:ウィンドウの縦幅　file:表示する外部ファイル//戻り値：function winObject(x,y,w,h,file){	this.centerX = x;		//X位置	this.centerY = y;		//Y位置	this.w = w;				//横幅	this.h = h;				//縦幅	this.element;			//ウィンドウエレメント	this.loadfile = file;	//表示する外部ファイル}//ウィンドウオブジェクトの初期化メソッド//引き数：//戻り値：winObject.prototype.init = function(){	var z = 4;	var testW = this.w/4;	var testH = this.h/4;		if(testW<2) testW = 2;	if(testH<2) testH = 2;	this.element = document.createElement('div');	this.element.id = 'winElement';	this.element.style.width = testW+'px';	this.element.style.height = testH+'px';	this.element.innerHTML = '<div id="winTclose"><a href="#close" onclick="removeWindow();"><img src="winset/close.gif" alt="close" width="22" height="22" /></a></div>'		var addBodyElement = document.getElementsByTagName('body').item(0);	addBodyElement.appendChild(this.element);	alpha(this.element.id,100,12,'up');	zoom(this.element.id,z*100,12,'up',this.centerX,this.centerY,this);}//ウィンドウオブジェクトが表示終えた後の処理//引き数：//戻り値：winObject.prototype.next_Event = function(){	//IMG外部ファイル読み込み	if(this.loadfile.match(/.jpg|.png|.gif/i)){		imgOpen(this.loadfile,this);	}		//HTML外部ファイルの読み込み	if(this.loadfile.match(/.html|.htm/i)){		httpOpen(this.loadfile,this);	}}//-----------------------------------------------------------------------------------------------//イメージオブジェクトとコンストラクタ//引き数：file:読み込む画像ファイル　obj:表示するオブジェクト//戻り値：function imgObject(file,obj) {	this.loadfile = file;	//読み込む画像ファイル	this.disObj = obj;		//表示するオブジェクト	this.element;			//画像を書き出す要素}//イメージオブジェクトを読み込む前にローディング待機を作る//引き数：//戻り値：imgObject.prototype.init = function(){	//ローディング待機画像	var loadingDIV = document.createElement('div');	loadingDIV.id = 'loadingbg';	loadingDIV.style.width = this.disObj.w+'px';	loadingDIV.style.height = this.disObj.h-winMargin-winbarHeight+'px';	//表示オブジェクトに書き出し	this.disObj.element.appendChild(loadingDIV);		//実際表示される画像	this.element = document.createElement('img');	this.element.id = 'imgElement';	this.element.src = this.loadfile;		//表示オブジェクトに書き出し	this.disObj.element.appendChild(this.element);	//ローディングが終わりを知らせるイベントリスナー	if(_MSIE){		this.element.attachEvent('onload',this.imgOutput);	}	else{		this.element.addEventListener('load',this.imgOutput,false);	}}//イメージオブジェクト読み込み完了後、待機画像の削除と画像の表示//引き数：//戻り値：imgObject.prototype.imgOutput = function(){	//ローディング待機要素の削除	var outID = new delwinObject('loadingbg');	if(outID) outID.init();		//イメージのフェイドイン	alpha('imgElement',100,24,'up');}//-----------------------------------------------------------------------------------------------//削除オブジェクトとコンストラクタ//引き数：emID:削除するエレメントのid//戻り値：function delwinObject(emID){	this.id = emID;									//削除するエレメントid	this.element = document.getElementById(emID);	//削除するエレメントそのもの}//削除オブジェクトの透過実行//引き数：//戻り値：delwinObject.prototype.init = function(){	alpha(this.id,0,8,'up',this);}//ウィンドウオブジェクトが透過０になった後の処理＞エレメントの削除//引き数：//戻り値：delwinObject.prototype.next_Event = function(){	var parentid = this.element.parentNode;	parentid.removeChild(this.element);}//動作関数=======================================================================================//ウィンドウの作成（読み込みファイル：IMG）//引き数：w:作成するウィンドウの横幅　h:作成するウィンドウの縦幅　file:読み込むファイル//戻り値：function winIMG(w,h,file){	//マウスの位置を得る	var mX = mouseX();	var mY = mouseY();		//ブラウザウィンドウの大きさ	var winW = windowWidth();	var winH = windowHeight();		//ウィンドウの実際のサイズ（marginやバーの高さを含める）	var winWidth = w+winMargin*2;	var winHeight = h+winMargin+winbarHeight;		//マウスの位置からmarginをとって、右下に向かって中心位置を固定	var cx = mX+winMargin+winWidth/2;	var cy = mY+winMargin+winHeight/2;	//表示位置から画像を表示してブラウザウィンドウをはみ出ないか調べる	if(winW<cx+winWidth/2){		cx = winW-winWidth/2-winMargin;	}	if(winH<cy+winHeight/2){		cy = winH-winHeight/2-winMargin;	}		//ウィンドウの作成	var winDiv = new winObject(cx,cy,winWidth,winHeight,file);	winDiv.init();}//ウィンドウの作成（読み込みファイル：HTML）//引き数：w:作成するウィンドウの横幅　h:作成するウィンドウの縦幅　file:読み込むファイル//戻り値：function winHTML(w,h,file){	var winDiv = new winObject(windowCenterX(),windowCenterY(),w,h,file);	var bgDiv = new bgObject();	bgDiv.init();	winDiv.init();}//イメージオブジェクトの作成//引き数：file:読み込む画像ファイル　displayObj:表示するオブジェクト//戻り値：function imgOpen(file,displayObj){	var imgObj = new imgObject(file,displayObj);	imgObj.init();}//外部ファイルを読み込むオブジェクト//引き数：file:読み込む画像ファイル　displayObj:表示するオブジェクト//戻り値：function httpOpen(file,displayObj){	//読み込みを行うhttpRequestオブジェクト	var httpObject;		if(_MSIE){		httpObject = new ActiveXObject("Msxml2.XMLHTTP");	}	else{		httpObject = new XMLHttpRequest();	}		//読み込み状態が変化したときに呼び出される動作設定	httpObject.onreadystatechange = function(){		//readyStateが完全読み込みの場合（４）		if(httpObject.readyState == 4){			//読み込み後の内容格納			var filestr;						switch(httpObject.status){				//読み込み完了				case 200:					filestr = httpObject.responseText;				break;				//ファイルが存在しない				case 404:					filestr = '指定されたファイルがありません';				break;			}			//ウィンドウエレメントに表示			displayObj.element.innerHTML += '<div id="winmain">'+filestr+'</div>';		}	}		//指定ファイルのオープン	httpObject.open('GET',file,true);	httpObject.send(null);}//ウィンドウの消去//引き数：//戻り値：function removeWindow(){	if(document.getElementById('winElement')){		var id = new delwinObject('winElement');		if(id) id.init();	}		if(document.getElementById('bgElement')){		var idbg = new delwinObject('bgElement');		if(idbg) idbg.init();	}}//htmlより呼び出し実行内容=====================================================================//ウィンドウの作成（読み込みファイル：HTML）//引き数：w:作成するウィンドウの横幅　h:作成するウィンドウの縦幅　e:イベントオブジェクト//戻り値：function win(w,h,e){	//イベントオブジェクトをグローバルに格納	evt = e;	//ブラウザのイベントをキャンセル	cancelWindow(e);		//すでにwindowが表示されていたら実行しないようにする	if(!document.getElementById('winElement')){		var targetElement;				if(_MSIE){ 			targetElement = e.srcElement; 		}		else{ 			targetElement = e.target;		}		//locationオブジェクトのためテキストに変換		var file = String(targetElement.parentNode);				//拡張子がイメージの場合、イメージ外部ファイル読み込み		if(file.match(/.jpg|.png|.gif/i)){			winIMG(w,h,file);		}				//拡張子がhtmlの場合、テキスト外部ファイルの読み込み		if(file.match(/.html|.htm/i)){			winHTML(w,h,file);		}	}}