<?xml version="1.0" encoding="EUC-JP"?>
<!DOCTYPE bml PUBLIC "-//ARIB STD-B24:1999//DTD BML Document for IPTV//JA" "http://www.arib.or.jp/B24/DTD/bml_x_x_iptv.dtd">
<?bml bml-version="100.0" ?>
<bml>

<!-- 2004.8.02 VOL.05 TAKERUAKATSUKA -->
<!-- 2010.10.01 VOL.06 AKIRA.IWASHITA -->

<head>
<title/>
<style><![CDATA[


	body {
		used-key-list:basic data-button; clut:url(default.clt);
	}

	* {
		left:0px; top:0px; width:960px; height:540px;
	}
	
	p{
		font-size:20px;
		color-index:7; grayscale-color-index:30 15;
	}
	p.iguide{
		font-size:16px;
		left:50px;width:112px;height:48px;
		color-index:7; grayscale-color-index:30 15;
	}
	p.cguide{
		font-size:16px;
		left:50px;top:250px;width:192px;height:208px;
		color-index:7; grayscale-color-index:30 15;
	}
	
	object.cell{
		width:50px; height:50px; visibility:hidden;
	}
	object.boy{
		left:0px; top:250px; width:50px; height:50px; visibility:hidden;
	}

]]></style>
<script><![CDATA[

var gMapOrigin = new Array(
	"00000000000000005000000000000005",
	"00000000000000000000000000000000",
	"00000000000000000000000000000000",
	"00000000000000000000000000000000",
	"00000000000000000000000000000000",
	"00000000000000000000000000000000",
	"11111111111101111111101111111100"
);
var gMap = new Array();
var MAP_CICLE = 0x1F;
var MAP_COLUMNS = 1000000; //どこまでも続くように思わせる
var MAP_ROWS = gMapOrigin.length;
var TIP_W = 50;
var TIP_H = 50;
var GRAVITY = 5;
var JUMP_SPD = 36;
var MAX_SPDX = TIP_W / 2;	// とりあえずTIP_Wをこえると明らかにバグるので注意
var MAX_SPDY = TIP_H - 2;	// とりあえずTIP_Wをこえると明らかにバグるので注意
var MAX_SPDE = TIP_W / 4;	// とりあえずTIP_Wをこえると明らかにバグるので注意
var ACCELE = 2;
var DRAW_ROWS = 7;
var DRAW_COLUMNS = 10;
var MAX_ENEMY = GetChildCnt("enemys");

var gGrassIds;
var gBlock0Ids;
var gBlock1Ids;
var gBlock2Ids;
var gAntennaIds;
var gEnemyIds;
var gItemIds;
var gItem2Ids;
var gIds;
var NORMALBLOCK_ID = 2;
var ITEMBLOCK_ID = 3;
var ANTENNA_ID = 5;
var ENEMY_ID = 6;
var ITEM_ID = 7;
var ITEM2_ID = 8;

var gMan;
var gAnimBlocks;
var gDrawMapTips;
var gEnemys;
var gItems;
var gLeft = 0;
var gBest = 2000;
var gDist = 0;
var gLife = 3;
var gTime = 300;
var gColumn = 0;
var lastX = -1;
var lastY = -1;
var lastDir = "-1";
var lastAct = -1;
var lastDist = -1;
var lastLife = -1;
var lastTime = -1;
var lastBoyId = "boy";
var gGameIsOver = false;
var LIFE_STR = "★★★★★★★★★★";

function start(){

	for(var r=0; r<MAP_ROWS; r++){
		gMap[r] = gMapOrigin[r].split("");
		for(var c=0 ; c<gMap[r].length ; c++)
		{
			gMap[r][c] = new MapTip(parseInt(gMap[r][c],10));
		}
	}
	gGrassIds = GetChildIds("grasses");
	gBlock0Ids = GetChildIds("block_0s");
	gBlock1Ids = GetChildIds("block_1s");
	gBlock2Ids = GetChildIds("block_2s");
	gAntennaIds = GetChildIds("antennas");
	gEnemyIds = GetChildIds("enemys");
	gItemIds = GetChildIds("items");
	gItem2Ids = GetChildIds("item2s");
	gIds = new Array(new Array(), gGrassIds, gBlock0Ids, gBlock1Ids, gBlock2Ids, gAntennaIds, gEnemyIds, gItemIds, gItem2Ids);
	gMan = new Man();
	gAnimBlocks = new Array();
	gDrawMapTips = new Array();
	gEnemys = new Array();
	gItems = new Array();
	gLeft = 0;
	gDist = 0;
	gLife = 3;
	gTime = 300;
	gGameIsOver = false;
	lastX = -1;
	lastY = -1;
	lastDir = "-1";
	lastAct = -1;
	lastDist = -1;
	lastLife = -1;
	lastTime = -1;
	hide("timeover");
	hide("dropout");
	hide("damage");
	hide("newrec");
	hide("ready");
	hide("readygo");
	var left = GetDrawLeft(gMan.x);
	AllDraw(left);
	show("ready");
	browser.sleep(2000);
	hide("ready");
	show("readygo");
	browser.sleep(300);
	hide("readygo");
	mainLoop();
}

function mainLoop()
{
	// 自分の移動
	gMan.move();
	
	var left = GetDrawLeft(gMan.x);
	if(gLeft < left)
		gLeft = left;
	if(gDist < gMan.x)
		gDist = gMan.x;
	

	// 1ブロック分進んだら、その分マップをランダム生成する
	var clm = gDist / TIP_W;
	if(gColumn != clm)
	{
		gColumn = clm;
		MakeMap(gColumn);
	}
	
	// アニメーションブロックのアニメーション
	for(var i=0 ; i<gAnimBlocks.length ; i++)
	{
		gAnimBlocks[i].anim();
	}

	// アイテムの動作
	for(var i=0 ; i<gItems.length ; i++)
	{
		gItems[i].move(left);
	}

	// 敵の動作
	for(var i=0 ; i<gEnemys.length ; i++)
	{
		gEnemys[i].move(left);
	}

	// アイテムとのあたり判定
	for(var i=0 ; i<gItems.length ; i++)
	{
		var o = gItems[i];
		if( o.x < gMan.x - TIP_W || gMan.x + TIP_W < o.x ||
			o.y < gMan.y - TIP_H || gMan.y + TIP_W < o.y)
		{
			continue;
		}
		else
		{
			// アイテム取った
			o.done = true;
			if(o.tip == ITEM_ID)
			{
				gTime += 150;
			}
			else if(o.tip == ITEM2_ID)
			{
				if(gLife < 5)
					gLife ++;
				else
					gTime += 30;
			}
		}
	}
	
	// 敵とのあたり判定
	for(var i=0 ; i<gEnemys.length ; i++)
	{
		var o = gEnemys[i];
		if( o.x < gMan.x - TIP_W / 3 || gMan.x + TIP_W / 3 < o.x ||
			o.y < gMan.y - TIP_H / 2 || gMan.y + TIP_H / 2 < o.y)
		{
			continue;
		}
		else
		{
			// 敵に当たった
			o.done = true;
			if(0 < gLife)
				gLife --;
			if(gLife <= 0)
			{
				show("damage");
				gGameIsOver = true;
			}
		}
	}
	
	// 敵の出現
	AppearEnemy(left);
	
	// 時間の経過
	gTime --;
	if(gTime == 0)
	{
		show("timeover");
		gGameIsOver = true;
	}
	
	// 描画
	AllDraw(left);
	
	// 再描画判定用データ保存
	lastX = gMan.x;
	lastY = gMan.y;
	lastDir = gMan.dir;
	lastAct = gMan.act;
	
	// 不要になったアニメーションブロックの削除
	var arr = new Array();
	for(var i=0 ; i<gAnimBlocks.length ; i++)
	{
		var o = gAnimBlocks[i];
		var m = GetMapObj(o.row,o.column);
		if(o.done || o.tip == 0 || m.drawObj == null)
		{
			if(m.drawObj != null)
				m.drawObj.animObj = null;
		}
		else
		{
			arr[arr.length] = o;
		}
	}
	gAnimBlocks = arr;

	// 不要になったアイテムの削除
	arr = new Array();
	for(var i=0 ; i<gItems.length ; i++)
	{
		var o = gItems[i];
		if(o.done)
		{
			if(o.visible)
				hide(o.id);
			ReleaseId(o.tip, o.id);
		}
		else
		{
			arr[arr.length] = o;
		}
	}
	gItems = arr;

	// 不要になった敵の削除
	arr = new Array();
	for(var i=0 ; i<gEnemys.length ; i++)
	{
		var o = gEnemys[i];
		if(o.done)
		{
			if(o.visible)
				hide(o.id);
			ReleaseId(ENEMY_ID, o.id);
		}
		else
		{
			arr[arr.length] = o;
		}
	}
	gEnemys = arr;
	
	// ゲームオーバー判定
	if(gGameIsOver)
	{
		browser.sleep(3000);
		if(gBest == gDist)
		{
			browser.lockScreen();
			show("newrec");
			browser.unlockScreen();
			browser.sleep(3000);
		}
		AllImgHide();
		start();
	}
	else
	{
		// 次回タイマーセット
		browser.setInterval("mainLoop();", 100, 1);
	}
}

function MakeMap(column)
{
	var idx = (column + DRAW_COLUMNS + 5) & MAP_CICLE;
	for(var i=1 ; i<DRAW_ROWS ; i++)
	{
		gMap[i][idx].tip = 0;
	}
	var r = browser.random(30000);
	var level = 0;
	if(r < 3000)
	{
		level = 0;
	}
	else if(r < 20000)
	{
		level = 1;
	}
	else
	{
		level = 2;
	}
	for(var i=0 ; i<level ; i++)
	{
		gMap[DRAW_ROWS - 1 - i][idx].tip = 1;
	}
	var r2 = browser.random(10000);
	if(r2 < 1000)
	{
		gMap[DRAW_ROWS - 4 - level][idx].tip = 3;
	}
	else if(r2 < 2000)
	{
		gMap[DRAW_ROWS - 3 - level][idx].tip = 2;
	}
}

function AllDraw(left)
{
	// 描画
	browser.lockScreen();
	if(lastX != gMan.x || lastY != gMan.y || gAnimBlocks.length != 0)
	{
		DrawMap(left);
	}
	if(lastX != gMan.x || lastY != gMan.y || lastDir != gMan.dir || lastAct != gMan.act)
	{
		gMan.draw();
	}
	for(var i=0 ; i<gItems.length ; i++)
	{
		gItems[i].draw(left);
	}
	for(var i=0 ; i<gEnemys.length ; i++)
	{
		gEnemys[i].draw(left);
	}
	if(gBest < gDist)
	{
		st("best", "HI:" + (gDist / 10) + "." + (gDist % 10) + "m");
		gBest = gDist;
	}
	if(lastDist != gDist)
	{
		st("dist", (gDist / 10) + "." + (gDist % 10) + "m");
		lastDist = gDist;
	}
	if((gTime / 10) != lastTime)
	{
		lastTime = gTime / 10;
		st("time", "残り時間：" + lastTime);
	}
	if(lastLife != gLife)
	{
		st("life", "LIFE:" + LIFE_STR.substring(0,gLife));
		lastLife = gLife;
	}
	browser.unlockScreen();
}

function AllImgHide()
{
	for(var i=0 ; i<gDrawMapTips.length ; i++)
	{
		if(gDrawMapTips[i].tip != 0)
			hide(gDrawMapTips[i].id);
	}
	for(var i=0 ; i<gItems.length ; i++)
	{
		hide(gItems[i].id);
	}
	for(var i=0 ; i<gEnemys.length ; i++)
	{
		hide(gEnemys[i].id);
	}
	hide(lastBoyId);
	lastBoyId = "boy";
}

function GetDrawLeft(x)
{
	var left = x - (TIP_W * (DRAW_COLUMNS-1) / 2);
	if(left < gLeft)
		left = gLeft;
	if((MAP_COLUMNS - DRAW_COLUMNS + 1) * TIP_W < left)
		left = (MAP_COLUMNS - DRAW_COLUMNS + 1) * TIP_W;
	return left;
}

// 敵の出現
function AppearEnemy(left)
{
	if(gEnemys.length < MAX_ENEMY)
	{
		for(var i=0 ; i<gDrawMapTips.length ; i++)
		{
			var o = gDrawMapTips[i];
			if(o.tip == ANTENNA_ID)
			{
				var r = browser.random(0x1000) >> 4; // 0x100 まで
				if(r < 0x1000)
				{
					browser.Ureg[1] = "chanko";
					var eid = GetId(ENEMY_ID);
					var x = o.x - 20;
					var y = o.y + 30;
					var dx = gMan.x - x;
					var dy = gMan.y - y;
					if(MAX_SPDE < dx)
					{
						dy = dy * MAX_SPDE / dx;
						dx = MAX_SPDE;
					}
					else if(dx < -MAX_SPDE)
					{
						dy = dy * -MAX_SPDE / dx;
						dx = -MAX_SPDE;
					}
					if(MAX_SPDE < dy)
					{
						dx = dx * MAX_SPDE / dy;
						dy = MAX_SPDE;
					}
					else if(dy < -MAX_SPDE)
					{
						dx = dx * -MAX_SPDE / dy;
						dy = -MAX_SPDE;
					}
					var e = new Enemy(x, y, dx, dy, eid);
					gEnemys[gEnemys.length] = e;
					return;
				}
			}
		}
	}
}

// xを中心とした描画。ただしマップの端は例外処理
function DrawMap(left)
{
	var off = left % 50;
	var dclm = left / 50;
	
	// 描画対象範囲外チェック
	var low = left - TIP_W;
	var hi = left + TIP_W * DRAW_COLUMNS;
	var arr = new Array();
	for(var i=0 ; i<gDrawMapTips.length ; i++)
	{
		var o = gDrawMapTips[i];
		if(o.x <= low || hi <= o.x)
		{
			// 描画対象から外れたのでデタッチ
			GetMapObj(o.row, o.column).drawObj = null;
			if(o.visible)
				hide(o.id);
			ReleaseId(o.tip, o.id);
		}
		else
		{
			// 描画対象のまま
			arr[arr.length] = o;
		}
	}
	gDrawMapTips = arr;	// 残りものに差し替え
	// 新規描画対象チェック
	for(var clm=0; clm<DRAW_COLUMNS; clm++)
	{
		// チップの設定から
		for(var row=0; row<DRAW_ROWS; row++)
		{
			var m = GetMapObj(row,dclm);
			if(m.tip == 0 || m.drawObj != null)
				continue;
			var id = GetId(m.tip);
			if(id == null)
				continue;
			var o = new DrawMapTip(row, dclm, m.tip, id);
			if(o.x <= low || hi <= o.x)
				continue;
			gDrawMapTips[gDrawMapTips.length] = o;
			m.drawObj = o;
		}
		dclm ++;
	}
	// マップの描画
	for(var i=0 ; i<gDrawMapTips.length ; i++)
	{
		var o = gDrawMapTips[i];
		var ol = o.x - left;
		var ot = o.y;
		if(o.animObj != null)
		{
			ol += o.animObj.x;
			ot += o.animObj.y;
			if(o.animObj.tip != o.tip)
			{
				if(o.visible)
					hide(o.id);
				o.visible = false;
				ReleaseId(o.tip, o.id);
				o.tip = o.animObj.tip;
				o.id = GetId(o.tip);
				GetMapObj(o.row, o.column).tip = o.tip;
			}
		}
		if(o.tip != 0)
		{
			gstyle(o.id).left = ol + "px";
			gstyle(o.id).top = ot + "px";
			if(!o.visible)
			{
				show(o.id);
				o.visible = true;
			}
		}
	}
}

function GetId(t)
{
	var ids = gIds[t];
	if(ids.length <= 0)
		return null;
	var id = ids[ids.length-1];
	ids.length = ids.length - 1;
	return id;
}

function ReleaseId(t, id)
{
	if(t < 0 || gIds.length <= t || id == null)
		return;
	gIds[t][gIds[t].length] = id;
}

function GetMap(r,c){

	if( c<0 || c>=MAP_COLUMNS ) return(1);
	if( r<0 || r>=MAP_ROWS ) return(0);
	
	return(gMap[r][c & MAP_CICLE].tip);
}

var dmy = new Object();
dmy.tip = 0;
dmy.drawObj = null;
function GetMapObj(r,c){

	if( r<0 || c<0 || c>=MAP_COLUMNS || r>=MAP_ROWS )
	{
		return dmy;
	}
	return(gMap[r][c & MAP_CICLE]);
}

function KeyDown(){

	var code = document.currentEvent.keyCode;

	if(gMan.keyOn == false)	return;
	
	if(gMan.state != 2 && (code == 1 || code == 18 || (21 <= code && code <= 24))){
		// 上/決定ボタン/色ボタンのどれでも押されたらジャンプ
		if(gMan.dx < 0)
			gMan.dy = -JUMP_SPD + gMan.dx * 0 / 100;
		else
			gMan.dy = -JUMP_SPD - gMan.dx * 0 / 100;
		gMan.state = 2;
		gMan.act = 4;
	} else if(code == 2){
		// 正面向きへ
		if(gMan.state == 2)
		{
			gMan.dir = "";
		}
		else
		{
			gMan.dx = 0;
			gMan.dir = "";
			gMan.state = 0;
		}
	} else if(code == 3){
		if(gMan.state == 2)
		{
			gMan.dx -= ACCELE * 2;
			if(gMan.dx < -MAX_SPDX)
				gMan.dx = -MAX_SPDX;
		}
		else if(gMan.state == 1 && gMan.dir == "r")	// 右向きに歩いている最中は左向くだけにする
		{
			gMan.state = 0;
			gMan.dx = 0;
		}
		else
		{
			gMan.state = 1;
		}
		gMan.dir = "l";
	} else if(code == 4){
		if(gMan.state == 2)
		{
			gMan.dx += ACCELE * 2;
			if(MAX_SPDX < gMan.dx)
				gMan.dx = MAX_SPDX;
		}
		else if(gMan.state == 1 && gMan.dir == "l")	// 左向きに歩いている最中は右向くだけにする
		{
			gMan.state = 0;
			gMan.dx = 0;
		}
		else
		{
			gMan.state = 1;
		}
		gMan.dir = "r";
	}
}

function MapTip(t)
{
	this.tip = t;
	this.drawObj = null;
}

function DrawMapTip(r,c,t,id0)
{
	this.column = c;
	this.row = r;
	this.x = c * TIP_W;
	this.y = r * TIP_H;
	this.tip = t;
	this.id = id0;
	this.animObj = null;
	this.visible = false;
}

function Enemy(x0,y0,dx0,dy0,id0)
{
	this.cnt = 0;
	this.x = x0;
	this.y = y0;
	this.dx = dx0;
	this.dy = dy0;
	this.id = id0;
	this.done = false;
	this.move = EnemyMove;
	this.draw = EnemyDraw;
	this.visible = false;
}

function EnemyMove(left)
{
	this.cnt ++;
	if(5 < this.cnt)
	{
		this.x += this.dx;
		this.y += this.dy;
	}
	if(left + TIP_W * DRAW_COLUMNS <= this.x || TIP_H * DRAW_ROWS <= this.y || this.x < left - TIP_W || this.y < -TIP_H)
	{
		this.done = true;
	}
}
function EnemyDraw(left)
{
	if(!this.visible)
	{
		show(this.id);
		this.visible = true;
	}
	gstyle(this.id).left = (this.x - left) + "px";
	gstyle(this.id).top = this.y + "px";
}

function Item(x0, y0, t, id0)
{
	this.x = x0;
	this.y = y0;
	this.dx = 5;
	this.dy = -10;
	this.tip = t;
	this.id = id0;
	this.done = false;
	this.move = ItemMove;
	this.draw = ItemDraw;
	this.visible = false;
}

function ItemMove(left)
{
	this.x += this.dx;
	this.y += this.dy;
	this.dy += GRAVITY;
	if(MAX_SPDY < this.dy)
		this.dy = MAX_SPDY;
	if(left + TIP_W * DRAW_COLUMNS <= this.x || TIP_H * DRAW_ROWS <= this.y || this.x < left - TIP_W || this.y < -TIP_H)
	{
		this.done = true;
	}
}

function ItemDraw(left)
{
	if(!this.visible)
	{
		show(this.id);
		this.visible = true;
	}
	gstyle(this.id).left = (this.x - left) + "px";
	gstyle(this.id).top = this.y + "px";
}

function AddAnimBlock(r,c)
{
	var m = GetMapObj(r,c);
	if(m.drawObj == null || m.drawObj.animObj != null)
		return;
	var o = new AnimBlock(r,c,m.tip);
	gAnimBlocks[gAnimBlocks.length] = o;
	m.drawObj.animObj = o;
}

function AnimBlock(r,c,t)
{
	this.row = r;
	this.column = c;
	this.dy = -15;
	this.y = 0;
	this.x = 0;
	this.tip = t;
	this.done = false;
	this.anim = AnimBlockAnim;
}

function AnimBlockAnim()
{
	var dy0 = this.dy;
	this.y += dy0;
	if(0 <= this.y)
	{
		this.y = 0;
		this.tip = 4;
		this.done = true;
	}
	this.dy += GRAVITY;
	if(dy0 < 0 && 0 <= this.dy)
	{
		if(this.tip == NORMALBLOCK_ID)
		{
			this.tip = 0;
			this.done = true;
		}
		else if(this.tip == ITEMBLOCK_ID)
		{
			// 頂点付近なのでアイテム追加してみる
			var r = browser.random(20000);
			if(r < 10000)
			{
				var iid = GetId(ITEM_ID);
				if(iid != null)
				{
					var item = new Item(this.column * TIP_W, this.row * TIP_H - TIP_H, ITEM_ID, iid);
					gItems[gItems.length] = item;
				}
			}
			else
			{
				var iid = GetId(ITEM2_ID);
				if(iid != null)
				{
					var item = new Item(this.column * TIP_W, this.row * TIP_H - TIP_H, ITEM2_ID, iid);
					gItems[gItems.length] = item;
				}
			}
		}
	}
}

function Man(){
	this.x			= 0;
	this.y			= TIP_H * (DRAW_ROWS - 2);
	this.dx			= 0;
	this.dy			= 0;

	this.state		= 0;					//今の状態 0:停止 1:歩き 2:空中
	this.keyOn		= true;					//キーマスク
	this.dir		= "";					//方向 r:右 l:左 空文字:正面
	this.act		= 0;
	
	this.draw = ManDraw;
	this.move = ManMove;
	this.walk = ManWalk;
	this.air = ManAir;
}

function ManDraw()
{
	var bid = "boy" + this.act + this.dir;
	if(bid != lastBoyId)
	{
		hide(lastBoyId);
		show(bid);
		lastBoyId = bid;
	}
	var center = TIP_W * (DRAW_COLUMNS-1) / 2;
	if(this.x < gLeft + center)
	{
		gstyle(bid).left = (this.x - gLeft) + "px";
	}
	else if(MAP_COLUMNS * TIP_W - center < this.x)
	{
		gstyle(bid).left = (this.x - (MAP_COLUMNS - DRAW_COLUMNS + 1) * TIP_W) + "px";
	}
	else
	{
		gstyle(bid).left = center + "px";
	}
	gstyle(bid).top = this.y + "px";
}

function ManMove()
{
	if(this.state == 0)			// 停止
	{
		this.act = 0;
		// 落下判定
		var mx = (this.x + TIP_W / 2) / TIP_W;
		var my = this.y / TIP_H;
		if(GetMap(my + 1, mx) == 0)
		{
			// 落下開始
			this.state = 2;	// 
			this.act = 4;	// 
		}
	}
	else if(this.state == 1)	// 歩き
	{
		this.walk();
	}
	else if(this.state == 2)	// 空中
	{
		this.air();
	}
	// 元に戻れないように制限
	if(this.x < gLeft)
		this.x = gLeft;
	// 地面の下に落ちたらゲームオーバー
	if(TIP_H * DRAW_ROWS <= this.y)
	{
		show("dropout");
		gGameIsOver = true;
	}
}

function ManWalk()
{
	var ndx = 0;
	var nx = 0;
	var ny = 0;
	var mx = 0;
	var my = 0;
	if(this.dir == "r")
	{
		ndx = this.dx + ACCELE;
		if(ndx < ACCELE)		ndx = ACCELE;
		else if(MAX_SPDX < ndx)	ndx = MAX_SPDX;
		nx = this.x + ndx;
		mx = (nx + TIP_W - 1) / TIP_W;
		ny = this.y;
		my = ny / TIP_H;
		if(GetMap(my, mx) != 0){
			nx = nx / TIP_W * TIP_W;
			ndx = 0;
		}
	}
	else
	{
		ndx = this.dx - ACCELE;
		if(ndx > -ACCELE)		ndx = -ACCELE;
		else if(-MAX_SPDX > ndx)	ndx = -MAX_SPDX;
		nx = this.x + ndx;
		mx = nx < 0 ? -1 : nx / TIP_W;
		ny = this.y;
		my = ny / TIP_H;
		if(GetMap(my, mx) != 0){
			nx = this.x / TIP_W * TIP_W;
			ndx = 0;
		}
	}

	this.x = nx;
	this.dx = ndx;
	this.act = (this.act + 1) % 4;

	// 落下判定
	mx = (nx + TIP_W / 2) / TIP_W;
	if(GetMap(my + 1, mx) == 0)
	{
		// 落下開始
		this.state = 2;	// 
		this.act = 4;	// 
	}
}

function ManAir()
{
	var dx = this.dx;
	var dy = this.dy + GRAVITY;
	if(MAX_SPDY < dy)
		dy = MAX_SPDY;
	
	var mx = (this.x + dx + TIP_W / 2) / TIP_W;
	var my = (this.y + dy) / TIP_H;
	if(0 <= dy)
	{
		// 落下中は
		// まず横に障害物なら左右の移動量を無くす
		if(dx < 0 && (this.x + dx < 0 || GetMap(my, (this.x + dx) / TIP_W) != 0))
		{
			this.x = this.x / TIP_W * TIP_W;
			dx = 0;
			mx = (this.x + dx + TIP_W / 2) / TIP_W;
		}
		else if(0 < dx && GetMap(my, (this.x + dx + TIP_W - 1) / TIP_W) != 0)
		{
			this.x = (this.x + dx) / TIP_W * TIP_W;
			dx = 0;
			mx = (this.x + dx + TIP_W / 2) / TIP_W;
		}
		// その後下に障害物なら着地へ
		if(GetMap(my + 1, mx) != 0)
		{
			if(this.dir == "")	dx = 0;
			else	dx = dx * 3 / 4;
			dy = 0;
			this.y = my * TIP_H;
			if(dx != 0)	this.state = 1;
			else		this.state = 0;
			this.act = 0;
		}
	}
	else if(dy < 0)
	{
		// 上昇中は
		// まず上に障害物なら強制的に下降へ
		var m = GetMapObj(my, mx);
		if(m.tip != 0)
		{
			// もし上が？ブロックならブロックの跳ね上がり動作を登録
			if(m.tip == ITEMBLOCK_ID || m.tip == NORMALBLOCK_ID)
			{
				AddAnimBlock(my,mx);
			}
			dy = 0;
			this.y = this.y / TIP_H * TIP_H;
			my = (this.y + dy) / TIP_H;
		}
		// 次に横に障害物なら左右の移動量を無くす
		if(dx < 0 && GetMap(my, (this.x + dx) / TIP_W) != 0)
		{
			this.x = this.x / TIP_W * TIP_W;
			dx = 0;
		}
		else if(0 < dx && GetMap(my, (this.x + dx + TIP_W - 1) / TIP_W) != 0)
		{
			this.x = (this.x + dx) / TIP_W * TIP_W;
			dx = 0;
		}

	}

	// 落下継続
	this.dx = dx;
	this.dy = dy;
	this.y += dy;
	this.x += dx;
}

function GetChildCnt(id)
{
	var p = gobj(id);
	var ret = 0;
	if(p)
	{
		var c = p.firstChild;
		while(c != null)
		{
			ret ++;
			c = c.nextSibling;
		}
	}
	return ret;
}

function GetChildIds(id)
{
	var p = gobj(id);
	var ret = new Array();
	if(p)
	{
		var c = p.firstChild;
		while(c != null)
		{
			ret[ret.length] = c.id;
			c = c.nextSibling;
		}
	}
	return ret;
}

function gobj(o){ return( document.getElementById(o) ); }
function gstyle(o){ return( document.getElementById(o).normalStyle ); }
function show(o){ gobj(o).normalStyle.visibility = "visible"; }
function hide(o){ gobj(o).normalStyle.visibility = "hidden"; }
function ps(n){ browser.playRomSound("romsound://"+n); }
function go(l){ browser.launchDocument( ""+l , "cut" ); }
function st(o,t)  { gobj(o).firstChild.data=t.toString();}
function si(o,d)  { gobj(o).data=d.toString();}

]]></script>
</head>

<body id="body" onload="start();">

<!-- ゲーム部 -->
	<div style="left:250px; top:70px; width:500px; height:350px; nav-index:0;" onkeydown="KeyDown();">

<!-- 背景 -->
		<object data="back.jpg" type="image/jpeg" style="left:0px; top:0px; width:500px; height:350px;"/>

<!-- block -->
		<div id="grasses" style="width:500px; height:350px;">
			<object id="g_0" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_1" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_2" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_3" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_4" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_5" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_6" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_7" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_8" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_9" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_10" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_11" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_12" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_13" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_14" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_15" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_16" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_17" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_18" class="cell" data="glass.png" type="image/X-arib-png"/>
			<object id="g_19" class="cell" data="glass.png" type="image/X-arib-png"/>
		</div>
		<div id="block_0s" style="width:500px; height:350px;">
			<object id="b0_0" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_1" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_2" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_3" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_4" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_5" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_6" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_7" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_8" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_9" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_10" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_11" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_12" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_13" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_14" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_15" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_16" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_17" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_18" class="cell" data="block_0.png" type="image/X-arib-png"/>
			<object id="b0_19" class="cell" data="block_0.png" type="image/X-arib-png"/>
		</div>
		<div id="block_1s" style="width:500px; height:350px;">
			<object id="b1_0" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_1" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_2" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_3" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_4" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_5" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_6" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_7" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_8" class="cell" data="block_1.png" type="image/X-arib-png"/>
			<object id="b1_9" class="cell" data="block_1.png" type="image/X-arib-png"/>
		</div>
		<div id="block_2s" style="width:500px; height:350px;">
			<object id="b2_0" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_1" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_2" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_3" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_4" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_5" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_6" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_7" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_8" class="cell" data="block_2.png" type="image/X-arib-png"/>
			<object id="b2_9" class="cell" data="block_2.png" type="image/X-arib-png"/>
		</div>
		<div id="antennas" style="width:500px; height:350px;">
			<object id="a_0" class="cell" data="antenna.png" type="image/X-arib-png"/>
			<object id="a_1" class="cell" data="antenna.png" type="image/X-arib-png"/>
			<object id="a_2" class="cell" data="antenna.png" type="image/X-arib-png"/>
			<object id="a_3" class="cell" data="antenna.png" type="image/X-arib-png"/>
			<object id="a_4" class="cell" data="antenna.png" type="image/X-arib-png"/>
		</div>
		<div id="enemys" style="width:500px; height:350px;">
			<object id="e_0" class="cell" data="en_1.png" type="image/X-arib-png"/>
		</div>
		<div id="items" style="width:500px; height:350px;">
			<object id="i_0" class="cell" data="item.png" type="image/X-arib-png"/>
			<object id="i_1" class="cell" data="item.png" type="image/X-arib-png"/>
			<object id="i_2" class="cell" data="item.png" type="image/X-arib-png"/>
		</div>
		<div id="item2s" style="width:500px; height:350px;">
			<object id="i2_0" class="cell" data="item2.png" type="image/X-arib-png"/>
			<object id="i2_1" class="cell" data="item2.png" type="image/X-arib-png"/>
			<object id="i2_2" class="cell" data="item2.png" type="image/X-arib-png"/>
		</div>
<!-- 人 -->
		<object id="boy" data="chara0.png" type="image/X-arib-png" class="boy"/>
		<object id="boy0" data="chara0.png" type="image/X-arib-png" class="boy"/>
		<object id="boy0l" data="chara0l.png" type="image/X-arib-png" class="boy"/>
		<object id="boy0r" data="chara0r.png" type="image/X-arib-png" class="boy"/>
		<object id="boy1l" data="chara1l.png" type="image/X-arib-png" class="boy"/>
		<object id="boy1r" data="chara1r.png" type="image/X-arib-png" class="boy"/>
		<object id="boy2l" data="chara2l.png" type="image/X-arib-png" class="boy"/>
		<object id="boy2r" data="chara2r.png" type="image/X-arib-png" class="boy"/>
		<object id="boy3l" data="chara3l.png" type="image/X-arib-png" class="boy"/>
		<object id="boy3r" data="chara3r.png" type="image/X-arib-png" class="boy"/>
		<object id="boy4" data="chara4.png" type="image/X-arib-png" class="boy"/>
		<object id="boy4l" data="chara4l.png" type="image/X-arib-png" class="boy"/>
		<object id="boy4r" data="chara4r.png" type="image/X-arib-png" class="boy"/>
		<object id="boy5" data="chara5.png" type="image/X-arib-png" class="boy"/>
		
	</div>
<!-- 解説 -->
	<div style="left:750px; top:0px; width:200px; height:540px;">
		<object class="boy" style="visibility:visible;top:50px;" data="chara0.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:51px;"><![CDATA[
プレイヤーです]]></p>
		<object class="cell" style="visibility:visible;top:100px;" data="glass.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:101px;"><![CDATA[【地面】穴に落ちるとゲームオーバーです]]></p>
		<object class="cell" style="visibility:visible;top:150px;" data="block_0.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:151px;"><![CDATA[【ブロック】　下から叩くと壊せます]]></p>
		<object class="cell" style="visibility:visible;top:200px;" data="block_1.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:201px;"><![CDATA[【？ブロック】下から叩くとアイテムが出ます]]></p>
		<object class="cell" style="visibility:visible;top:250px;" data="block_2.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:251px;"><![CDATA[【ブロック２】堅いので壊せません]]></p>
		<object class="cell" style="visibility:visible;top:300px;" data="antenna.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:301px;"><![CDATA[【ヘリ】　　　弾を撃ってきます]]></p>
		<object class="cell" style="visibility:visible;top:350px;" data="en_1.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:351px;"><![CDATA[【弾】当たるとLIFEが一つ減ります！！]]></p>
		<object class="cell" style="visibility:visible;top:400px;" data="item.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:401px;"><![CDATA[【時計】残り時間が15増えます]]></p>
		<object class="cell" style="visibility:visible;top:450px;" data="item2.png" type="image/X-arib-png"/>
		<p class="iguide" style="top:451px;"><![CDATA[【LIFE回復】　LIFE+1,最大5。最大時は時間+3]]></p>

	</div>
<!-- テキスト -->
	<p id="ready" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">Ｒｅａｄｙ！</p>
	<p id="readygo" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">ＧＯ！！</p>
	<p id="timeover" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">時間切れ</p>
	<p id="dropout" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">うわーー！</p>
	<p id="damage" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">ぎゃーー！</p>
	<p id="newrec" style="font-size:36px;left:0px;top:250px;width:960px;height:36px;text-align:center;visibility:hidden;background-color-index:0;">記録を更新しました</p>
	<p id="best" style="font-size:24px;left:40px;top:75px;width:200px;height:24px;">HI:200.0m</p>
	<p id="dist" style="left:40px;top:150px;width:160px;height:20px;">0.0m</p>
	<p id="life" style="left:40px;top:175px;width:160px;height:20px;">★★★</p>
	<p id="time" style="left:40px;top:200px;width:160px;height:20px;">残り時間：30</p>
	<p class="cguide"><![CDATA[【操作説明】
上：ジャンプ
下：停止
右：右に走る
左：左に走る

【空中での操作説明】
下：正面を向く
　　(着地時に自動停止)
右：少し右に移動
　　(押すたびに効果あり)
左：少し左に移動
　　(押すたびに効果あり)
]]></p>

</body>
</bml>

