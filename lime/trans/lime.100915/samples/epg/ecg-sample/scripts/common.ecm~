//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
// Copyright (C)2009, NTT Inc. All rights reserved.
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
var VOD_CONTENT_LIST_PATH = '../tsv/list.tsv';
browser.launchIPTVContent = dummyLaunchIPTVContent; // remove this line

function upKeyPressed(code)     { return(code == 1); }
function downKeyPressed(code)   { return(code == 2); }
function leftKeyPressed(code)   { return(code == 3); }
function rightKeyPressed(code)  { return(code == 4); }
function isNumericTuned(code)   { return((code >= 5) && (code <= 14)); }
function getTunedNumber(code)   { return(isNumericTuned(code) ? code - 5 : -1); }
function isColorPressed(code)   { return((code >= 21) && (code <= 24)); }
function getColorNumber(code)   { return(isColorClicked(code) ? code - 21 : -1); }
function enterKeyPressed(code)  { return(code == 18); }
function returnKeyPressed(code) { return(code == 19); }

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
var gParams = new GlobalParams();

function GlobalParams() {
  this.isFirstSound = true;

  this.crid        = null;
  this.activeObj   = null;
  this.listObj     = null;
  this.detailObj   = null;
  this.shortcutObj = new ShortcutKey();

  this.verticalKeyEnable   = true;
  this.horizontalKeyEnable = true;
  
  this.focusKeyID = '';
  this.isKeyOff   = false;
  this.keyOnTimer = NaN;

  this.thumbDispTimer = NaN;
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function ContentInformation(crid,               title,
                            contentDetailShort, contentDetailLong,
                            copyrightShort,     copyrightLong,
                            thumbnailMiddleUrl, thumbnailLargeUrl,
                            playControlFileUrl) {
  this.crid          = crid  || null;
  this.title         = multiByteSubstring(title,              0, 128    ) || '';
  this.cDetailShort  = multiByteSubstring(contentDetailShort, 0, 26  * 5) || '';
  this.cDetailLong   = multiByteSubstring(contentDetailLong,  0, 224 * 5) || '';
  this.copyrightSht  = multiByteSubstring(copyrightShort,     0, 50  * 2) || '';
  this.copyrightLng  = multiByteSubstring(copyrightLong,      0, 75  * 2) || '';
  this.thumbnailMUrl = thumbnailMiddleUrl || null;
  this.thumbnailLUrl = thumbnailLargeUrl  || null;
  this.playCtrlFUrl  = playControlFileUrl || null;
}

function ListInformation(list, totalNum) {
  this.list     = list;
  this.totalNum = totalNum;
}


//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function getContentInfoListOverIP(page, numPerPage, length) {
  page       = page       || 0;
  numPerPage = numPerPage || 9;
  length     = length     || -1;

  var tmp = browser.transmitTextDataOverIP(VOD_CONTENT_LIST_PATH, null, "EUC-JP");
  if (tmp[0] != 1) return(new ListInformation(null, 0));
  tmp = tmp[2].split("\r\n");

  // needs refactoring -->
  var records = new Array();
  for(var i = 0, idx = 0; i < tmp.length; i++) {
    if (tmp[i] != '') records[idx++] = tmp[i];
  }

  var idx = page * numPerPage;
  if ((length < 0) || ((length >= 0) && (idx + length > records.length))) {
    length = records.length - idx;
  }
  
  var resultList = new Array();
  for(var i = 0; i < length; i++) {
    var tmp = records[i + idx].split("\t");
    resultList[i] = new ContentInformation(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4],
                                           tmp[5], tmp[6], tmp[7], tmp[8]);
  }
  // <-- needs refactoring

  return new ListInformation(resultList, records.length);
}


//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function min(a, b) { return((a < b) ? a : b); }
function max(a, b) { return((a > b) ? a : b); }
function getElementById(id) { return document.getElementById(id); }

function showElement(id) { document.getElementById(id).normalStyle.visibility='visible'; }
function hideElement(id) { document.getElementById(id).normalStyle.visibility='hidden';  }
function isVisible(id)   { return(document.getElementById(id).normalStyle.visibility=='visible'); }

function setImage(id, img) { if(document.getElementById(id).data!=img) document.getElementById(id).data = img; }
function setText(id,  str) { document.getElementById(id).firstChild.data = String(str); }

function truncate(string, length) {
  string = string || '';
  length = length || 32;

  // needs refactoring ->
  for(var i = 0, len = 0; i < string.length; i++) {
    len += (string.charCodeAt(i) < 256) ? 1 : 2;
    if (len - length > 0) return(string.substring(0, i)+'¡Ä');
  }
  // <- needs refactoring
  return(string);
}

function multiByteLength(string) {
  string = string || '';

  var len = 0;
  for(var i = 0; i < string.length; i++) {
    len += (string.charCodeAt(i) < 256) ? 1 : 2;
  }
  return(len);
}

function multiByteSubstring(string, start, end) {
  string = string || '';
  start  = start  ||  0;
  end    = end    || -1;

  var sIdx = -1, eIdx = -1;
  for(var i = 0, len = 0; i < string.length; i++) {
    len += (string.charCodeAt(i) < 256) ? 1 : 2;
    if ((sIdx < 0) && (start < len)) {
      sIdx = i;
      if (end < 0) break;
    }
    if ((sIdx >= 0) && (end < len)) {
      eIdx = i;
      break;
    }
  }
  return((eIdx >= 0) ? string.substring(sIdx, eIdx) : string.substring(sIdx));
}

function setTextColor(id, colorIdx, grayscaleColorIdx){
  var elmStyle=getElementById(id).normalStyle;

  elmStyle.colorIndex = String(colorIdx);
  elmStyle.grayscaleColorIndex = String(grayscaleColorIdx);
}

function playSound(id){
  if(!gParams.isFirstSound) browser.playRomSound("romsound://"+id);
  gParams.isFirstSound = false;
}

function createUri(uri, key, val) {
  var tmp = (uri || '').split('?');
  return(uri+((tmp.length <= 1) ? '?' : '&')+key+'='+val);
//  return(uri+((tmp.length <= 1) ? '?' : '&')+
//         encodeURIComponent(key)+'='+encodeURIComponent(val));
}

function Arguments() {}
function parseArguments(uri) {
  var tmp = (uri || '').split('?');
  var arg = new Arguments();

  if (tmp.length <= 1) return(arg);
  tmp = tmp[1].split('&');
  for(var i = 0; i < tmp.length; i++) {
    var buf = tmp[i].split('=');
    arg[buf[0]] = buf[1];
//    arg[decodeURIComponent(buf[0]]) = decodeURIComponent(buf[1]);
  }
  return(arg);
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function keyOff() {
  if (gParams.isKeyOff) return;
  
  if (gParams.keyOnTimer != NaN) browser.clearTimer(gParams.keyOnTimer);

  gParams.focusKeyID = (document.currentFocus) ? document.currentFocus.id : '';

  browser.lockScreen(); {
    showElement('loading');
    setFocus('default');
  }; browser.unlockScreen();

  gParams.isKeyOff   = true;
  gParams.keyOnTimer = browser.setInterval('keyOn();', 1000, 1);
}

function keyOn() {
  if (gParams.keyOnTimer != NaN) browser.clearTimer(gParams.keyOnTimer);
  gParams.keyOnTimer = NaN;

  if (!gParams.isKeyOff) return;

  gParams.isKeyOff = false;

  browser.lockScreen(); {
    setFocus(gParams.focusKeyID);
    hideElement('loading');
  }; browser.unlockScreen();

  gParams.focusKeyID = '';
}
function setFocus(id){
  (gParams.isKeyOff) ? (gParams.focusKeyID = id) : getElementById(id).focus();
}
function dummyKey() {}


//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function ShortcutKey() {
  this.visible = false;
  
  this.show  = SKeyShowFunc;
  this.hide  = SKeyHideFunc;
  this.focus = SKeyFocusFunc;
  this.blur  = SKeyBlurFunc;
  this.focusToUpper = SKeyFocusToUpperFunc;
  this.focusToLower = SKeyFocusToLowerFunc;
  this.isFocusable  = SKeyIsFocusableFunc;
  this.execReturn   = SKeyExecReturnFunc;
}
function SKeyShowFunc() {
  this.visible = true;
  setImage('btn_back', 'images/btn_back.jpg');
  showElement('btn_back');
}
function SKeyHideFunc() {
  this.visible = false;
  setImage('btn_back', 'images/btn_back.jpg');
  hideElement('btn_back');
}
function SKeyFocusFunc() {
  if (!this.isFocusable()) return;
  playSound(9);
  setImage('btn_back', 'images/btn_back-focus.jpg');
  setFocus('btn_back');
}
function SKeyBlurFunc(){
  if (!this.isFocusable()) return;
  setImage('btn_back', 'images/btn_back.jpg');
}
function SKeyFocusToUpperFunc() {
  var curObj = gParams.activeObj;
  if ((curObj == null) || !curObj.isFocusable()) return;
  curObj.focus(-1);
  this.blur();
}
function SKeyFocusToLowerFunc() {
  var curObj = gParams.activeObj;
  if ((curObj == null) || !curObj.isFocusable()) return;
  curObj.focus(1);
  this.blur();
}
function SKeyExecReturnFunc() {
  var curObj = gParams.activeObj;
  if (curObj == null) return;

  this.blur();
  curObj.execReturn();
}
function SKeyIsFocusableFunc() { return(this.visible); }

function onShortcutKeyDown() {
  var code = document.currentEvent.keyCode;
  var id   = document.currentEvent.target.id;

  var shortcut = gParams.shortcutObj;
  browser.lockScreen(); {
    if (downKeyPressed(code)) {
      shortcut.focusToLower();
    } else if (upKeyPressed(code)) {
      shortcut.focusToUpper();
//    } else if (leftKeyPressed(code)) {
//    } else if (rightKeyPressed(code)) {
//    } else if (isNumericTuned(code)) {
//    } else if (isColorClicked(code)) {
    } else if (enterKeyPressed(code)) {
      shortcut.execReturn();
    } else if (returnKeyPressed(code)) {
      shortcut.execReturn();
     }
  };  browser.unlockScreen();
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function debug(str) { setText('txt_debug', 'debug)'+str); }

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
function dummyLaunchIPTVContent(uri, returnUri, resumePoint) {
  debug('[[play]] -> '+uri);

  var ret = browser.launchDocument(returnUri, 'cut');
  if (isNaN(ret)) browser.launchDocument(browser.getActiveDocument().split('?')[0], 'cut');
}
